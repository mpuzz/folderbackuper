//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FolderBackup.CommunicationProtocol
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationData", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class AuthenticationData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string saltField;
        
        private string tokenField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string salt
        {
            get
            {
                return this.saltField;
            }
            set
            {
                this.saltField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string token
        {
            get
            {
                return this.tokenField;
            }
            set
            {
                this.tokenField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SerializedVersion", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class SerializedVersion : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] encodedVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] encodedVersion
        {
            get
            {
                return this.encodedVersionField;
            }
            set
            {
                this.encodedVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadData", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class UploadData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ipField;
        
        private ushort portField;
        
        private string tokenField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ip
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort port
        {
            get
            {
                return this.portField;
            }
            set
            {
                this.portField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string token
        {
            get
            {
                return this.tokenField;
            }
            set
            {
                this.tokenField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    public partial class ServiceErrorMessage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int typeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IBackupService", SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IBackupService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/registerStep1", ReplyAction="http://tempuri.org/IBackupService/registerStep1Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/registerStep1ServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    string registerStep1(string username);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/registerStep1", ReplyAction="http://tempuri.org/IBackupService/registerStep1Response")]
    System.Threading.Tasks.Task<string> registerStep1Async(string username);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/registerStep2", ReplyAction="http://tempuri.org/IBackupService/registerStep2Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/registerStep2ServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    bool registerStep2(string username, string password, string salt);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/registerStep2", ReplyAction="http://tempuri.org/IBackupService/registerStep2Response")]
    System.Threading.Tasks.Task<bool> registerStep2Async(string username, string password, string salt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/authStep1", ReplyAction="http://tempuri.org/IBackupService/authStep1Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/authStep1ServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.AuthenticationData authStep1(string username);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackupService/authStep1", ReplyAction="http://tempuri.org/IBackupService/authStep1Response")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.AuthenticationData> authStep1Async(string username);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/authStep2", ReplyAction="http://tempuri.org/IBackupService/authStep2Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/authStep2ServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    string authStep2(string token, string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/authStep2", ReplyAction="http://tempuri.org/IBackupService/authStep2Response")]
    System.Threading.Tasks.Task<string> authStep2Async(string token, string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getCurrentVersion", ReplyAction="http://tempuri.org/IBackupService/getCurrentVersionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/getCurrentVersionServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.SerializedVersion getCurrentVersion();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getCurrentVersion", ReplyAction="http://tempuri.org/IBackupService/getCurrentVersionResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion> getCurrentVersionAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/newTransaction", ReplyAction="http://tempuri.org/IBackupService/newTransactionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/newTransactionServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    bool newTransaction(FolderBackup.CommunicationProtocol.SerializedVersion newVersion);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/newTransaction", ReplyAction="http://tempuri.org/IBackupService/newTransactionResponse")]
    System.Threading.Tasks.Task<bool> newTransactionAsync(FolderBackup.CommunicationProtocol.SerializedVersion newVersion);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/commit", ReplyAction="http://tempuri.org/IBackupService/commitResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/commitServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    bool commit();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/commit", ReplyAction="http://tempuri.org/IBackupService/commitResponse")]
    System.Threading.Tasks.Task<bool> commitAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/rollback", ReplyAction="http://tempuri.org/IBackupService/rollbackResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/rollbackServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    bool rollback();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/rollback", ReplyAction="http://tempuri.org/IBackupService/rollbackResponse")]
    System.Threading.Tasks.Task<bool> rollbackAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/uploadFile", ReplyAction="http://tempuri.org/IBackupService/uploadFileResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/uploadFileServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.UploadData uploadFile();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/uploadFile", ReplyAction="http://tempuri.org/IBackupService/uploadFileResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> uploadFileAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getFilesToUpload", ReplyAction="http://tempuri.org/IBackupService/getFilesToUploadResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/getFilesToUploadServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    byte[][] getFilesToUpload();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getFilesToUpload", ReplyAction="http://tempuri.org/IBackupService/getFilesToUploadResponse")]
    System.Threading.Tasks.Task<byte[][]> getFilesToUploadAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/resetToPreviousVersion", ReplyAction="http://tempuri.org/IBackupService/resetToPreviousVersionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/resetToPreviousVersionServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.UploadData resetToPreviousVersion(int versionAgo);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/resetToPreviousVersion", ReplyAction="http://tempuri.org/IBackupService/resetToPreviousVersionResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> resetToPreviousVersionAsync(int versionAgo);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getOldVersions", ReplyAction="http://tempuri.org/IBackupService/getOldVersionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/getOldVersionsServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.SerializedVersion[] getOldVersions();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getOldVersions", ReplyAction="http://tempuri.org/IBackupService/getOldVersionsResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion[]> getOldVersionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getFile", ReplyAction="http://tempuri.org/IBackupService/getFileResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(FolderBackup.CommunicationProtocol.ServiceErrorMessage), Action="http://tempuri.org/IBackupService/getFileServiceErrorMessageFault", Name="ServiceErrorMessage", Namespace="http://schemas.datacontract.org/2004/07/FolderBackup.CommunicationProtocol")]
    FolderBackup.CommunicationProtocol.UploadData getFile(FolderBackup.CommunicationProtocol.SerializedVersion serV);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IBackupService/getFile", ReplyAction="http://tempuri.org/IBackupService/getFileResponse")]
    System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> getFileAsync(FolderBackup.CommunicationProtocol.SerializedVersion serV);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IBackupServiceChannel : IBackupService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class BackupServiceClient : System.ServiceModel.ClientBase<IBackupService>, IBackupService
{
    
    public BackupServiceClient()
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public BackupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public BackupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string registerStep1(string username)
    {
        return base.Channel.registerStep1(username);
    }
    
    public System.Threading.Tasks.Task<string> registerStep1Async(string username)
    {
        return base.Channel.registerStep1Async(username);
    }
    
    public bool registerStep2(string username, string password, string salt)
    {
        return base.Channel.registerStep2(username, password, salt);
    }
    
    public System.Threading.Tasks.Task<bool> registerStep2Async(string username, string password, string salt)
    {
        return base.Channel.registerStep2Async(username, password, salt);
    }
    
    public FolderBackup.CommunicationProtocol.AuthenticationData authStep1(string username)
    {
        return base.Channel.authStep1(username);
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.AuthenticationData> authStep1Async(string username)
    {
        return base.Channel.authStep1Async(username);
    }
    
    public string authStep2(string token, string username, string password)
    {
        return base.Channel.authStep2(token, username, password);
    }
    
    public System.Threading.Tasks.Task<string> authStep2Async(string token, string username, string password)
    {
        return base.Channel.authStep2Async(token, username, password);
    }
    
    public FolderBackup.CommunicationProtocol.SerializedVersion getCurrentVersion()
    {
        return base.Channel.getCurrentVersion();
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion> getCurrentVersionAsync()
    {
        return base.Channel.getCurrentVersionAsync();
    }
    
    public bool newTransaction(FolderBackup.CommunicationProtocol.SerializedVersion newVersion)
    {
        return base.Channel.newTransaction(newVersion);
    }
    
    public System.Threading.Tasks.Task<bool> newTransactionAsync(FolderBackup.CommunicationProtocol.SerializedVersion newVersion)
    {
        return base.Channel.newTransactionAsync(newVersion);
    }
    
    public bool commit()
    {
        return base.Channel.commit();
    }
    
    public System.Threading.Tasks.Task<bool> commitAsync()
    {
        return base.Channel.commitAsync();
    }
    
    public bool rollback()
    {
        return base.Channel.rollback();
    }
    
    public System.Threading.Tasks.Task<bool> rollbackAsync()
    {
        return base.Channel.rollbackAsync();
    }
    
    public FolderBackup.CommunicationProtocol.UploadData uploadFile()
    {
        return base.Channel.uploadFile();
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> uploadFileAsync()
    {
        return base.Channel.uploadFileAsync();
    }
    
    public byte[][] getFilesToUpload()
    {
        return base.Channel.getFilesToUpload();
    }
    
    public System.Threading.Tasks.Task<byte[][]> getFilesToUploadAsync()
    {
        return base.Channel.getFilesToUploadAsync();
    }
    
    public FolderBackup.CommunicationProtocol.UploadData resetToPreviousVersion(int versionAgo)
    {
        return base.Channel.resetToPreviousVersion(versionAgo);
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> resetToPreviousVersionAsync(int versionAgo)
    {
        return base.Channel.resetToPreviousVersionAsync(versionAgo);
    }
    
    public FolderBackup.CommunicationProtocol.SerializedVersion[] getOldVersions()
    {
        return base.Channel.getOldVersions();
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.SerializedVersion[]> getOldVersionsAsync()
    {
        return base.Channel.getOldVersionsAsync();
    }
    
    public FolderBackup.CommunicationProtocol.UploadData getFile(FolderBackup.CommunicationProtocol.SerializedVersion serV)
    {
        return base.Channel.getFile(serV);
    }
    
    public System.Threading.Tasks.Task<FolderBackup.CommunicationProtocol.UploadData> getFileAsync(FolderBackup.CommunicationProtocol.SerializedVersion serV)
    {
        return base.Channel.getFileAsync(serV);
    }
}
